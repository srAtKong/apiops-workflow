# This is a basic workflow for APIOps

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches:
     - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy-customer-api:
    name: Deploy Customer API to Gateway
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v1
      - name: Create temp dirs
        run: |
          mkdir ./spec
          mkdir ./spec-backup
      - name: Backup Insomnia Spec
        run: |
          cp ./.insomnia/ApiSpec/*.yml ./spec-backup
          ls ./spec-backup 

      #Install dev tools
      - name: Install NodeJS
        uses: actions/setup-node@v1
      - name: Install Deck  
        run: |
          curl -sL https://github.com/kong/deck/releases/download/v1.6.0/deck_1.6.0_linux_amd64.tar.gz -o deck.tar.gz
          tar -xf deck.tar.gz -C /tmp
          sudo cp /tmp/deck /usr/local/bin/ 
      - name: Install inso
        run: npm install -g insomnia-inso@2.3.0

      - name: Prepare Upstream URL for Kong declarative config
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}$'
          files: '["./.insomnia/ApiSpec/*.yml"]'
        env:
          UPSTREAM_SERVER_URL: '${{ secrets.UPSTREAM_SERVER_URL }}'
      
      # Generate declarative config
      - name: Generate Kong declarative config
        run: |
          inso generate config customer-api --type declarative --tags $TAG --output kong.yaml 
          cat kong.yaml
        env:
          TAG: customer-api

      - name: Check connectivity to Kong Control Plane
        run: |
          deck ping --headers "kong-admin-token:${{ secrets.KONG_ADMIN_TOKEN }}" --kong-addr ${{ secrets.KONG_ADMIN_ADDR }}
      
      - name: Validate the Declarative Config File
        run: |
          deck validate --headers "kong-admin-token:${{ secrets.KONG_ADMIN_TOKEN }}" --kong-addr ${{ secrets.KONG_ADMIN_ADDR }} -s kong.yaml

      # Deploy to Kong
      - name: Deploy to Kong
        run: deck sync --headers "kong-admin-token:${{ secrets.KONG_ADMIN_TOKEN }}" --workspace ${{ secrets.KONG_WORKSPACE }} --skip-consumers --kong-addr ${{ secrets.KONG_ADMIN_ADDR }} -s kong.yaml
        
      # Wait for 2 secs for the config to propagate from CP->DP
      - name: Wait
        run:  sleep 2
            
      # Run API tests
      - name: Run test suites
        run: inso run test customer-api-test -e ${{ env.TARGET_ENVIRONMENT }} --ci
        env:
          TARGET_ENVIRONMENT: Azure
      
  publish-customer-api-to-portal:
    name: Publish Customer API to Dev Portal
    needs: deploy-customer-api
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v1

      #Install dev tools
      - name: Install NodeJS
        uses: actions/setup-node@v1
      - name: Install Deck  
        run: |
          curl -sL https://github.com/kong/deck/releases/download/v1.6.0/deck_1.6.0_linux_amd64.tar.gz -o deck.tar.gz
          tar -xf deck.tar.gz -C /tmp
          sudo cp /tmp/deck /usr/local/bin/ 
      - name: Install inso
        run: npm install -g insomnia-inso@2.3.0
     
      # Prepare Customer OAS spec to the Dev Portal
      - name: Prepare Server URL for Spec
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}$'
          files: '["./.insomnia/ApiSpec/*.yml"]'
        env:
          UPSTREAM_SERVER_URL: '${{ secrets.KONG_PROXY_ADDR }}'    
          
      # We will push to the Kong dev portal
      - name: Deploy to Kong Dev Portal
        run: |          
          inso export spec customer-api --output specs/customer.yaml
          curl -X POST ${{ secrets.KONG_ADMIN_ADDR }}/${{ secrets.KONG_WORKSPACE }}/files -F path=specs/customer.yaml -F contents=@specs/customer.yaml -H "kong-admin-token: ${{ secrets.KONG_ADMIN_TOKEN }}"
            
       
